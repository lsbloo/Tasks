// Mocks generated by Mockito 5.4.1 from annotations
// in tasks_flutter_one/test/unit/home/home_screen_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasks_core/base_provider.dart' as _i6;
import 'package:tasks_core/core/data/model/weather_data_model.dart' as _i3;
import 'package:tasks_flutter_one/features/home/contract/home_contract.dart'
    as _i4;
import 'package:tasks_flutter_one/features/home/data/model/task_vo.dart' as _i5;
import 'package:tasks_flutter_one/features/home/data/repository/home_repository.dart'
    as _i7;
import 'package:tasks_flutter_one/features/home/presenter/home_presenter.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCurrentWeather_1 extends _i1.SmartFake
    implements _i3.CurrentWeather {
  _FakeCurrentWeather_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomePresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePresenter extends _i1.Mock implements _i4.HomePresenter {
  @override
  void navigateToHomeAddTaskScreen(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateToHomeAddTaskScreen,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onCLickAddTask() => super.noSuchMethod(
        Invocation.method(
          #onCLickAddTask,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickDeleteTask(_i5.TaskVO? taskVO) => super.noSuchMethod(
        Invocation.method(
          #onClickDeleteTask,
          [taskVO],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateToEditTaskPage(
    dynamic context,
    _i5.TaskVO? taskVO,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateToEditTaskPage,
          [
            context,
            taskVO,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChangeLongPress(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #onChangeLongPress,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProvider(_i6.BaseProvider? baseProvider) => super.noSuchMethod(
        Invocation.method(
          #setProvider,
          [baseProvider],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeView].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeView extends _i1.Mock implements _i4.HomeView {
  @override
  void sendCallNavigateHome() => super.noSuchMethod(
        Invocation.method(
          #sendCallNavigateHome,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupTasksView(List<_i5.TaskVO>? taskVO) => super.noSuchMethod(
        Invocation.method(
          #setupTasksView,
          [taskVO],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showOnDeleteDialog(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #showOnDeleteDialog,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupViewWeather(_i3.CurrentWeather? weather) => super.noSuchMethod(
        Invocation.method(
          #setupViewWeather,
          [weather],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showError(String? message) => super.noSuchMethod(
        Invocation.method(
          #showError,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #showMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showOrHideLoading(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #showOrHideLoading,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i7.HomeRepository {
  @override
  _i8.Future<_i2.Response> saveTask(_i5.TaskVO? taskVO) => (super.noSuchMethod(
        Invocation.method(
          #saveTask,
          [taskVO],
        ),
        returnValue: _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #saveTask,
            [taskVO],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #saveTask,
            [taskVO],
          ),
        )),
      ) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i2.Response> updateTask(
    _i5.TaskVO? taskVO,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            taskVO,
            id,
          ],
        ),
        returnValue: _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #updateTask,
            [
              taskVO,
              id,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #updateTask,
            [
              taskVO,
              id,
            ],
          ),
        )),
      ) as _i8.Future<_i2.Response>);
  @override
  _i8.Future<_i3.CurrentWeather> getWeatherCurrent(
    double? lat,
    double? long,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherCurrent,
          [
            lat,
            long,
          ],
        ),
        returnValue: _i8.Future<_i3.CurrentWeather>.value(_FakeCurrentWeather_1(
          this,
          Invocation.method(
            #getWeatherCurrent,
            [
              lat,
              long,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.CurrentWeather>.value(_FakeCurrentWeather_1(
          this,
          Invocation.method(
            #getWeatherCurrent,
            [
              lat,
              long,
            ],
          ),
        )),
      ) as _i8.Future<_i3.CurrentWeather>);
}

/// A class which mocks [HomePresenterImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePresenterImpl extends _i1.Mock implements _i9.HomePresenterImpl {
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onCLickAddTask() => super.noSuchMethod(
        Invocation.method(
          #onCLickAddTask,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateToHomeAddTaskScreen(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateToHomeAddTaskScreen,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickDeleteTask(_i5.TaskVO? taskVO) => super.noSuchMethod(
        Invocation.method(
          #onClickDeleteTask,
          [taskVO],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateToEditTaskPage(
    dynamic context,
    _i5.TaskVO? taskVO,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateToEditTaskPage,
          [
            context,
            taskVO,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChangeLongPress(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #onChangeLongPress,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProvider(_i6.BaseProvider? baseProvider) => super.noSuchMethod(
        Invocation.method(
          #setProvider,
          [baseProvider],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void getCurrentWeather() => super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateLogin(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateLogin,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHome(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateHome,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHomeAddTask(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateHomeAddTask,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHomeEditTask(
    dynamic context,
    dynamic taskVO,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateHomeEditTask,
          [
            context,
            taskVO,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateCreateAccount(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateCreateAccount,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateSignupLogin(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateSignupLogin,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popBackStack(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #popBackStack,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<String> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
        returnValueForMissingStub: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
}
