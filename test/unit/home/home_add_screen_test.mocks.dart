// Mocks generated by Mockito 5.4.1 from annotations
// in tasks_flutter_one/test/unit/home/home_add_screen_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasks_core/base_provider.dart' as _i5;
import 'package:tasks_core/core/data/model/weather_data_model.dart' as _i3;
import 'package:tasks_flutter_one/features/home/contract/home_add_task_contract.dart'
    as _i4;
import 'package:tasks_flutter_one/features/home/data/model/task_vo.dart' as _i8;
import 'package:tasks_flutter_one/features/home/data/repository/home_repository.dart'
    as _i6;
import 'package:tasks_flutter_one/features/home/presenter/home_add_task_presenter.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCurrentWeather_1 extends _i1.SmartFake
    implements _i3.CurrentWeather {
  _FakeCurrentWeather_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeAddTaskPresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeAddTaskPresenter extends _i1.Mock
    implements _i4.HomeAddTaskPresenter {
  @override
  void onClickDateButton() => super.noSuchMethod(
        Invocation.method(
          #onClickDateButton,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onSaveDateSelected(DateTime? pickedDate) => super.noSuchMethod(
        Invocation.method(
          #onSaveDateSelected,
          [pickedDate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickExpandItemsForm(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #onClickExpandItemsForm,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickAddTask(
    String? title,
    String? description,
    String? date,
    bool? isFav,
    String? latitude,
    String? longitude,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onClickAddTask,
          [
            title,
            description,
            date,
            isFav,
            latitude,
            longitude,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickLocationIcon() => super.noSuchMethod(
        Invocation.method(
          #onClickLocationIcon,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onGiveLocationUser() => super.noSuchMethod(
        Invocation.method(
          #onGiveLocationUser,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setControlPopPage(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #setControlPopPage,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool controlPage() => (super.noSuchMethod(
        Invocation.method(
          #controlPage,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setProvider(_i5.BaseProvider? baseProvider) => super.noSuchMethod(
        Invocation.method(
          #setProvider,
          [baseProvider],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeAddTaskView].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeAddTaskView extends _i1.Mock implements _i4.HomeAddTaskView {
  @override
  void showPageDatePicker() => super.noSuchMethod(
        Invocation.method(
          #showPageDatePicker,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showDatePickedSelected(String? date) => super.noSuchMethod(
        Invocation.method(
          #showDatePickedSelected,
          [date],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupExpandItems(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #setupExpandItems,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupDialogConfirmLocation() => super.noSuchMethod(
        Invocation.method(
          #setupDialogConfirmLocation,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupMapWithLocate(
    String? lat,
    String? long,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setupMapWithLocate,
          [
            lat,
            long,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showError(String? message) => super.noSuchMethod(
        Invocation.method(
          #showError,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #showMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  dynamic showOrHideLoading(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #showOrHideLoading,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i6.HomeRepository {
  @override
  _i7.Future<_i2.Response> saveTask(_i8.TaskVO? taskVO) => (super.noSuchMethod(
        Invocation.method(
          #saveTask,
          [taskVO],
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #saveTask,
            [taskVO],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #saveTask,
            [taskVO],
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> deleteTask(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i2.Response> updateTask(
    _i8.TaskVO? taskVO,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            taskVO,
            id,
          ],
        ),
        returnValue: _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #updateTask,
            [
              taskVO,
              id,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #updateTask,
            [
              taskVO,
              id,
            ],
          ),
        )),
      ) as _i7.Future<_i2.Response>);
  @override
  _i7.Future<_i3.CurrentWeather> getWeatherCurrent(
    double? lat,
    double? long,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherCurrent,
          [
            lat,
            long,
          ],
        ),
        returnValue: _i7.Future<_i3.CurrentWeather>.value(_FakeCurrentWeather_1(
          this,
          Invocation.method(
            #getWeatherCurrent,
            [
              lat,
              long,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.CurrentWeather>.value(_FakeCurrentWeather_1(
          this,
          Invocation.method(
            #getWeatherCurrent,
            [
              lat,
              long,
            ],
          ),
        )),
      ) as _i7.Future<_i3.CurrentWeather>);
}

/// A class which mocks [HomeAddTaskPresenterImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeAddTaskPresenterImpl extends _i1.Mock
    implements _i9.HomeAddTaskPresenterImpl {
  @override
  String get locate => (super.noSuchMethod(
        Invocation.getter(#locate),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  set locate(String? _locate) => super.noSuchMethod(
        Invocation.setter(
          #locate,
          _locate,
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickDateButton() => super.noSuchMethod(
        Invocation.method(
          #onClickDateButton,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onSaveDateSelected(DateTime? pickedDate) => super.noSuchMethod(
        Invocation.method(
          #onSaveDateSelected,
          [pickedDate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickExpandItemsForm(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #onClickExpandItemsForm,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickAddTask(
    String? title,
    String? description,
    String? date,
    bool? isFav,
    String? latitude,
    String? longitude,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onClickAddTask,
          [
            title,
            description,
            date,
            isFav,
            latitude,
            longitude,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClickLocationIcon() => super.noSuchMethod(
        Invocation.method(
          #onClickLocationIcon,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onGiveLocationUser() => super.noSuchMethod(
        Invocation.method(
          #onGiveLocationUser,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setControlPopPage(bool? flag) => super.noSuchMethod(
        Invocation.method(
          #setControlPopPage,
          [flag],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool controlPage() => (super.noSuchMethod(
        Invocation.method(
          #controlPage,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setProvider(_i5.BaseProvider? baseProvider) => super.noSuchMethod(
        Invocation.method(
          #setProvider,
          [baseProvider],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateLogin(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateLogin,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHome(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateHome,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHomeAddTask(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateHomeAddTask,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateHomeEditTask(
    dynamic context,
    dynamic taskVO,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateHomeEditTask,
          [
            context,
            taskVO,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateCreateAccount(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateCreateAccount,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateSignupLogin(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #navigateSignupLogin,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popBackStack(dynamic context) => super.noSuchMethod(
        Invocation.method(
          #popBackStack,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<String> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i7.Future<String>.value(''),
        returnValueForMissingStub: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
}
